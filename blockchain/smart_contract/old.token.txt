pragma solidity ^0.4.0;
/**
 * 一个简单的代币合约。
 */
 contract token {

     string public name; //代币名称
     string public symbol; //代币符号比如'$'
     uint8 public decimals = 18;  //代币单位，展示的小数点后面多少个0,和以太币一样后面是是18个0
     uint256 public totalSupply; //代币总量
     /* This creates an array with all balances */
     mapping (address => uint256) public balanceOf;

     event Transfer(address indexed from, address indexed to, uint256 value);  //转帐通知事件

      address owner = msg.sender;

      modifier onlyOwner() {
        require(msg.sender == owner);
        _;
      }


     /* 初始化合约，并且把初始的所有代币都给这合约的创建者
      * @param _owned 合约的管理者
      * @param tokenName 代币名称
      * @param tokenSymbol 代币符号
      */
     function token(address _owned, string tokenName, string tokenSymbol) {
         //合约的管理者获得的代币总量
         balanceOf[_owned] = totalSupply;

         name = tokenName;
         symbol = tokenSymbol;

     }

     /**
      * 转帐，具体可以根据自己的需求来实现
      * @param  _to address 接受代币的地址
      * @param  _value uint256 接受代币的数量
      */
     function transfer(address _to, uint256 _value) {
       //从发送者减掉发送额
       balanceOf[msg.sender] -= _value;

       //给接收者加上相同的量
       balanceOf[_to] += _value;

       //通知任何监听该交易的客户端
       Transfer(msg.sender, _to, _value);
     }

     /**
      * 增加代币，并将代币发送给捐赠新用户
      * @param  _to address 接受代币的地址
      * @param  _amount uint256 接受代币的数量
      */
     function issue(address _to, uint256 _amount) internal{
         totalSupply = totalSupply + _amount;
         balanceOf[_to] += _amount;

         //通知任何监听该交易的客户端
         Transfer(this, _to, _amount);
     }
  }

/**
 * 众筹合约
 */
contract Crowdsale is token {
    address public beneficiary = msg.sender; //受益人地址，为合约创建者
    uint public tokenCreationRate = 13000;  //代币比例
    uint public gift = 1000;  //赠送
    string tokenName = "xxx xxx xxx";
    string tokenSymbol = "xxx";
    mapping(address => uint256) public balance; //保存众筹地址
    mapping (address => bool) public blacklist; //黑名单，赠送代币一个地址只能领取一次




    //记录已接收的ether通知
    event GoalReached(address _beneficiary, uint _amountRaised);

    //转帐通知
    event FundTransfer(address _backer, uint _amount, bool _isContribution);




    /**
     * 初始化构造函数
     *
     */
    function Crowdsale(
    ) token(this, tokenName, tokenSymbol){
    }


    /**
     * 默认函数
     *
     */
    function () payable {
        uint amount = msg.value;
        uint fundTranAmount = 0;
        if(amount==0){
            if(!blacklist[msg.sender]){
                blacklist[msg.sender] = true;
                fundTranAmount = 1000000000000000000 * gift;
                issue(msg.sender, fundTranAmount);

            }
        }else{
            fundTranAmount = msg.value * tokenCreationRate;
            issue(msg.sender, fundTranAmount);
            
        }
        
        FundTransfer(msg.sender, fundTranAmount, true);
    }



    /**
     * 收回资金
     *
     */
    function safeWithdrawal(uint _withdrawaleth)  {
        //如果达成众筹目标，并且合约调用者是受益人
        if ( beneficiary == msg.sender) {
            beneficiary.transfer(_withdrawaleth);
            FundTransfer(beneficiary, _withdrawaleth, false);
        }
    }
}